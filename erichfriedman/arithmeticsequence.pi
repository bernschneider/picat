/* Janko Erich Friedman Artithmetic Sequenc
https://erich-friedman.github.io/puzzle/arith/ */
import sat, util. 

main(No) ?=>
    input(No, M), NZ = len(M), NS = len(M[1]), M :: (-1)..9, % -1 = empty
    foreach(L in M.rows() ++ M.columns())
        N = len(L),
        count(-1, L, N-3),
        Idx = new_list(3), Idx :: 1..N, increasing_strict(Idx), 
        V = new_list(3), V :: 0..9, 
        foreach(I in 1..3) element(Idx[I], L, V[I]) end,
        V[1] #< V[2], V[1] + V[3] #= 2 * V[2]
    end,
    solve(M),
    foreach(Z in 1..NZ, S in 1..NS) 
		if M[Z,S] >= 0 then printf("%d|", M[Z,S]) else print(" |") end,
        if S = NS then nl end
    end, nl, fail.

input(0, M) =>
    M = {{_,_,2,_}, {_,_,_,6}, {1,_,_,_}, {_,5,_,_}}. /*
 |1|2|3|
0|3| |6|
1| |5|9|
2|5|8| | CPU time 0.024 seconds., korrekt */
input(1, M) =>
    M = {{_,_,_,4,_}, {_,_,_,_,5}, {3,_,_,_,_}, {_,_,5,_,_}, {_,7,_,_,_} }. /*
2| |3|4| |
 |3|4| |5|
3|5| | |7|
4| |5|6| |
 |7| |8|9| CPU time 0.041 seconds, korrekt */