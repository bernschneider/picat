/* Janko Erich Friedman Blackout
https://erich-friedman.github.io/puzzle/blackout/ using parse_term */
import util.

search(Equation, BO) => % BO = number of blackout squares
    N = len(Equation),
    EqualSign = find_first_of(Equation, '='),  
    Idx = new_list(BO), % indices of blackout squares
    foreach(J in 1..BO) 
        between(1, N, Idx[J]), 
        Idx[J] != EqualSign,
        if J > 1 then Idx[J-1] < Idx[J] end
    end,
    ValidEquation = [Equation[I] : I in 1..N, not membchk(I, Idx)],
    [LHS, RHS] = ValidEquation.split("="),
    catch(parse_term(LHS) =:= parse_term(RHS), _Exception, fail), % catch avoids syntax error!
    println(ValidEquation).

main(No) =>
    input(No, Equation), 
    foreach(BO in 2..4) search(Equation, BO) end.

input(0, Equation) => Equation = "42-124+71=5*7-6". /* 
42-14+1=5*7-6
4-24+71=57-6
42-14+7=5*7 korrekt */
input(1, Equation) => Equation = "98/2+7*8=1+5*79". /* 
98/2+7*8=15*7
8/2+7*8=1+59
9/2*8=1+5*7 korrekt */
input(12, Equation) => Equation = "96*9-7=74+67+83". /* 
96*9-7=74+783
9*9-7=4+67+3
96-7=74+7+8 CPU time 0.027 seconds, korrekt */