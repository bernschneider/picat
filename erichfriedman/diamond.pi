/* Janko Erich Friedman Diamond
https://erich-friedman.github.io/puzzle/diamond/ */
import util, sat.

main(No) =>	
    input(No, D), NZ = len(D), NS = len(D[1]), Nrect = sum(array_matrix_to_list(D)),
    % Divide the grid into squares along the grid lines ..:
    R0 = new_array(Nrect), R0 :: 1..NZ, C0 = new_array(Nrect), C0 :: 1..NS, 
    R1 = new_array(Nrect), R1 :: 1..NZ, C1 = new_array(Nrect), C1 :: 1..NS, 
    % .. so that each square contains exactly one red diamond:
    I = 0,
    foreach(Z in 1..NZ, S in 1..NS, D[Z,S] = 1)
        I := I + 1,
        R0[I] #=< Z #/\ Z #=< R1[I] #/\ C0[I] #=< S #/\ S #=< C1[I]
    end,
    % The squares do not overlap:
    Sz = new_array(Nrect), Sz :: 1..min(NZ,NS), % square size
    Rects = [[R0[J], C0[J], Sz[J], Sz[J]]: J in 1..Nrect], diffn(Rects),
    foreach(J in 1..Nrect)
   		Sz[J] #= R1[J] - R0[J] + 1,
   		Sz[J] #= C1[J] - C0[J] + 1
    end,
    % Erzeuge Matrix mit den lfd. Nummern der Rechtecke:
    M = new_array(NZ,NS), M :: 1..Nrect,
    foreach(Z in 1..NZ, S in 1..NS, J in 1..Nrect)
   		(R0[J] #=< Z #/\ Z #=< R1[J] #/\ C0[J] #=< S #/\ S #=< C1[J]) #<=> M[Z,S] #= J
    end,
    Vars = to_list(R0 ++ R1 ++ C0 ++ C1 ++ Sz) ++ array_matrix_to_list(M),
    solve(Vars),
    foreach(Z in 1..NZ, S in 1..NS)
   		printf("%2d|", M[Z,S]),
        if S = NS then nl end
    end.

input(0, D) => 
    D = {{1,0,0,1,0,0,1},
         {0,0,0,0,0,0,0},
         {0,0,0,1,0,0,0},
         {0,0,0,0,0,0,0},
         {0,0,0,0,1,0,0},
         {0,0,0,0,0,0,1},
         {1,0,0,0,1,0,1}}. /*
 1| 1| 1| 2| 2| 3| 3|
 1| 1| 1| 2| 2| 3| 3|
 1| 1| 1| 4| 5| 5| 5|
 7| 7| 7| 7| 5| 5| 5|
 7| 7| 7| 7| 5| 5| 5|
 7| 7| 7| 7| 8| 8| 6|
 7| 7| 7| 7| 8| 8| 9| CPU time 0.081 seconds, correct */
input(1, D) => 
    D = {{1,0,0,0,0, 0,0,0,0,1, 0,0,0,0,1},
         {0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
         {0,0,0,0,0, 0,0,1,0,0, 1,0,0,0,0},
         {0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
         {0,0,0,0,0, 1,0,0,0,1, 0,0,0,0,0},
         {0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
         {0,0,0,1,0, 0,0,0,1,0, 0,0,0,0,0},
         {0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
         {0,0,0,0,0, 0,0,1,0,0, 0,0,0,0,0},
         {0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
         {0,0,0,0,0, 0,1,0,0,0, 0,0,0,0,0},
         {0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
         {0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
         {0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
         {0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
         {0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
         {0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
         {1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1}}. /*
 1| 1| 1| 1| 1| 4| 4| 4| 4| 2| 2| 3| 3| 3| 3|
 1| 1| 1| 1| 1| 4| 4| 4| 4| 2| 2| 3| 3| 3| 3|
 1| 1| 1| 1| 1| 4| 4| 4| 4| 5| 5| 3| 3| 3| 3|
 1| 1| 1| 1| 1| 4| 4| 4| 4| 5| 5| 3| 3| 3| 3|
 1| 1| 1| 1| 1| 6| 9| 9| 9| 7| 7| 7| 7| 7| 7|
 8| 8| 8| 8| 8| 8| 9| 9| 9| 7| 7| 7| 7| 7| 7|
 8| 8| 8| 8| 8| 8| 9| 9| 9| 7| 7| 7| 7| 7| 7|
 8| 8| 8| 8| 8| 8|10|10|10| 7| 7| 7| 7| 7| 7|
 8| 8| 8| 8| 8| 8|10|10|10| 7| 7| 7| 7| 7| 7|
 8| 8| 8| 8| 8| 8|10|10|10| 7| 7| 7| 7| 7| 7|
 8| 8| 8| 8| 8| 8|11|13|13|13|13|13|13|13|13|
12|12|12|12|12|12|12|13|13|13|13|13|13|13|13|
12|12|12|12|12|12|12|13|13|13|13|13|13|13|13|
12|12|12|12|12|12|12|13|13|13|13|13|13|13|13|
12|12|12|12|12|12|12|13|13|13|13|13|13|13|13|
12|12|12|12|12|12|12|13|13|13|13|13|13|13|13|
12|12|12|12|12|12|12|13|13|13|13|13|13|13|13|
12|12|12|12|12|12|12|13|13|13|13|13|13|13|13| CPU time 0.738 seconds, correct */
