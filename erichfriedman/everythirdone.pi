/* Janko Erich Friedman Every Third One - using path_d(Vs,Es,Start,Dest)
https://erich-friedman.github.io/puzzle/third/ */
import sat.
dir(R1,C1,R2,C2) = cond(R1 = R2, 3 + C2 - C1, 2 + R2 - R1). % 2/4 = W/E, 1/3 = N/S
show(X) = cond(X > 0, to_string(X), "  "). 

main(P) =>
    input(P, Ar), N = len(Ar), 
    No = new_array(2,N,N), No :: 0..N*N, No[1,N,1] #= 1, % numbering the vertices in the path starting from "Start" = 1
    Vs = [{(F,R,C), _} : F in 1..2, R in 1..N, C in 1..N], % % The path may revisit arrows for a second time (F = 2)
    foreach({(F,R,C), B} in Vs) B #= 1 #<=> No[F,R,C] #> 0 end,
    Es =  [{(F1,R1,C1), (F2,R2,C2), _} : {(F1,R1,C1),_} in Vs, {(F2,R2,C2),_} in Vs, 
            abs(R2 - R1) + abs(C2 - C1) = 1, (R1,C1) != (1,N), (R2,C2) != (N,1)], % the path may not revisit the Start
    path_d(Vs, Es, (1,N,1), (1,1,N)),
    EMap = new_map(), foreach({(F1,R1,C1), (F2,R2,C2), B} in Es) EMap.put({F1,R1,C1, F2,R2,C2}, B) end,
    foreach({(F1,R1,C1), (F2,R2,C2), B} in Es)
        % The path may not reverse direction:
        Brev #= EMap.get({F2,R2,C2,3-F1,R1,C1}, 0), B #= 1 #=> Brev #= 0,
        B #= 1 #=> No[F2,R2,C2] #= No[F1,R1,C1] + 1,
        if (Ar[R1,C1] = dir(R1,C1,R2,C2); (R1,C1) = (N,1))
            then B #= 1 #=> No[F1,R1,C1] mod 3 #= 1  % Every third arrow along the path should point in the direction of the path ..:
            else B #= 1 #=> No[F1,R1,C1] mod 3 #!= 1 % .. and all other arrows along the path should not
        end
    end,
    % The given solution uses one edges twice and one edge in both directions => we can not forbid this
    NoAsList = vars(No), Edges #= max(NoAsList), % number of edges must be minimized to get the given solution
    solve([$min(Edges)], vars(No) ++ vars(Vs) ++ vars(Es) ++ values(EMap)),
    Chr = " ^<v>",
    foreach(R in 1..N, C in 1..N)
        N1 = min(No[1,R,C], No[2,R,C]), N2 = max(No[1,R,C], No[2,R,C]),
        printf("%2s %2s%c|", show(N1), show(N2), Chr[1+Ar[R,C]]),
        if C = N then nl end
    end. 

input(0, Ar) =>
    N=1, S=3, W=2, E=4, 
    Ar = {{N,W,S,0}, 
          {S,W,N,N},
          {W,S,S,W}, 
          {0,N,W,E}}. /* 
    ^|    <|    v|11   |
    v|    <| 9  ^|  10^|
 2  <|   3v| 8 4v|   7<|
 1   |    ^| 5  <|   6>| CPU time 0.645 seconds, correct */
input(12, Ar) =>
    N=1, S=3, W=2, E=4, 
    Ar = {{S,S,W,S,S,0}, 
          {S,S,W,W,S,N},
          {W,S,W,S,W,N},
          {N,S,N,S,S,W},
          {E,E,S,N,N,W}, 
          {0,E,N,E,S,E}}. /* 
     v|     v|   24<|   25v|     v|   29 |
    9v|   10v|   23<|22 26<|   27v|   28^|
    8<|   11v|   12<|13 21v|     <|     ^|
 3  7^|    4v|   15^|14 20v|     v|     <|
 2  6>|    5>|   16v|   19^|     ^|     <|
    1 |     >|   17^|   18>|     v|     >|
CPU time 8.962 seconds, correct */