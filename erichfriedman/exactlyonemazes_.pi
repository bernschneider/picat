/* Janko Erich Friedman Exactly One Mazes - using path_d(Vs,Es,Src,Dest)
https://erich-friedman.github.io/puzzle/exactly1/ */
import sat. 
pfeil(N, Es, Z, S) = Chr =>
    if     Z > 1, membchk({(Z,S), (Z-1,S), 1}, Es) then Chr = '^'
    elseif Z < N, membchk({(Z,S), (Z+1,S), 1}, Es) then Chr = 'v'
    elseif S > 1, membchk({(Z,S), (Z,S-1), 1}, Es) then Chr = '<'
    elseif S < N, membchk({(Z,S), (Z,S+1), 1}, Es) then Chr = '>'
    else Chr = ' '
    end.

main(P) =>
    input(P, A), N = len(A), Amax = max([A[Z,S] : Z in 1..N, S in 1..N]),
    Vs = [{(Z,S), _} : Z in 1..N, S in 1..N], 
    Es = [{(Z,S), (Z1,S1), _} : {(Z,S),_} in Vs, {(Z1,S1),_} in Vs, abs(Z1 - Z) + abs(S1 - S) = 1], 
    path_d(Vs,Es,(N,1),(1,N)), 
    % The path must pass through exactly one unit square of each L shape:
    foreach(Sh in 1..Amax) sum([B : {(Z,S),B} in Vs, Z in 1..N, S in 1..N, A[Z,S] = Sh]) #= 1 end,
    solve(vars(Vs) ++ vars(Es)),
    foreach(Z in 1..N, S in 1..N)
        printf("%c%c|", cond((Z=N,S=1), 'S', cond((Z=1,S=N), 'F', cond(A[Z,S] = 0, ' ', chr(96+A[Z,S])))), pfeil(N, Es, Z, S) ),
        if S = N then nl end
    end. 

input(0, A) =>
    A = {{1,1,1,4,4,0},
         {0,2,1,4,5,0}, 
         {0,2,0,4,5,6}, 
         {0,2,2,5,5,6}, 
         {0,3,3,3,6,6}, 
         {0,0,0,3,0,0}}. /*
a |a |a |d |d |F |
 >|b>|av|d |e | ^|
 ^|b | >|d>|e>|f^|
 ^|b |b |e |e |f |
 ^|c<|c |c |f |f |
S>| ^|  |c |  |  | correct */