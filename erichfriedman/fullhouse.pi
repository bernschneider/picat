/* Janko Erich Friedman Full House (nach Hexa End)
https://erich-friedman.github.io/puzzle/full/ */
import util, sat.

main(I) =>
    input(I, A), N = len(A), 
    No = new_array(N,N), No :: 0..N*N, % numbering the vertices in the path starting from "Start" = 1
    foreach(Z in 1..N, S in 1..N) A[Z,S] #= 0 #<=> No[Z,S] #= 0 end, % Z|S is not part of the path 
    Vs = [{(Z,S), 1} : Z in 1..N, S in 1..N, A[Z,S] = 1], % all white squares are passed by the path
    Es =  [{(Z,S), (Z1,S1), _} : {(Z,S),_} in Vs, {(Z1,S1),_} in Vs, abs(Z1 - Z) + abs(S1 - S) = 1],
    Start = (0,0), Finish = (N+1,N+1), % dummy vertices ..
    Vs1 = [{Start,1}, {Finish,1}|Vs],  
    % Allow any square V as Start or Finish:
    Es1 = [{Start,V,_} : {V,_} in Vs] ++ [{V,Finish,_} : {V,_} in Vs] ++ Es,
    path_d(Vs1,Es1,Start,Finish),
    EMap = new_map(), foreach ({(Z1,S1),(Z2,S2),B} in Es) EMap.put({Z1,S1,Z2,S2}, B) end,
    foreach({(0,0), (Z,S), B} in Es1)
        B #= 1 #=> No[Z,S] #= 1 % start path numbering here
    end,
    % The path can only change direction when it hits a black square, a square that contains part of the existing path, or the edge of the grid:
    foreach({(Z1,S1), (Z2,S2), B} in Es)
        B #= 1 #=> No[Z2,S2] #= No[Z1,S1] + 1, % increment number within the path
        DZ = Z2 - Z1, DS = S2 - S1, Z3 = Z2 + DZ, S3 = S2 + DS, % the prolongation of this edge leads to (Z3,S3)
        if 0<Z3, Z3=<N, 0<S3, S3=<N, A[Z3,S3] = 1 then % not the edge of the grid, does not hit a black square
            (B #= 1 #/\ EMap.get({Z2,S2,Z3,S3}) #= 0) #=> No[Z3,S3] #< No[Z2,S2]  % (Z3,S3) is part of the path so far
        end
    end,
    solve(vars(No) ++ vars(Es1) ++ values(EMap)),
    foreach(Z in 1..N, S in 1..N)
        if A[Z,S] = 0 then print("  |") else printf("%2d|", No[Z,S]) end,
        if S = N then nl end
    end. 

input(1, A) => 
    A = {{1,1,1,1,1},
         {1,1,1,1,1},
         {1,1,1,1,1},
         {0,1,1,1,1},
         {0,1,1,1,0}}. /*
 9| 8| 7| 6| 5|
10| 1| 2| 3| 4|
11|12|13|14|15|
  |19|18|17|16|
  |20|21|22|  |     CPU time 0.201 seconds, correct */
input(2, A) => 
    A = {{1,1,1,1,1},
         {1,1,1,1,0},
         {0,1,1,1,1},
         {1,1,1,0,1},
         {1,1,1,1,1}}. /*
 5| 4| 3| 2| 1|
 6| 7| 8| 9|  |
  |22|21|10|11|
18|19|20|  |12|
17|16|15|14|13|     CPU time 0.098 seconds, correct */