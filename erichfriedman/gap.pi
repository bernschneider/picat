/* Erich Friedman Gap
https://erich-friedman.github.io/puzzle/gap/ */
import cp, util.
main(No) =>
    input(No, GapZ, GapS), N = len(GapZ), 
    M = new_array(N,N), M :: 0..1,
    % there are two shaded squares in every row and column:
    foreach(L in rows(M) ++ columns(M)) sum(L) #= 2 end,
    % shaded squares do not touch, even at corners:
    foreach(Z in 1..N-1, S in 1..N-1) M[Z,S] + M[Z,S+1] + M[Z+1,S] + M[Z+1,S+1] #< 2 end, 
    % the numbers on the side of the grid indicate the number of white squares between the shaded squares in that row or column:
    foreach({Gap,L} in zip(GapZ ++ GapS, M.rows() ++ M.columns()))
        Idx = [I1, I2], Idx :: 1..N, 
        I1 + Gap + 1 #= I2,
        element(I1, L, 1), element(I2, L, 1)
    end,
    solve([ff,down], M), Chr = " X", 
    foreach(Z in 1..N, S in 1..N)
      printf("%c|", Chr[1+M[Z,S]]),
      if S = N then nl end
    end.

input(0, GapZ, GapS) =>
    GapZ = [_,_,_,_,_,_,_,_,4],
    GapS = [_,_,4,_,_,_,_,_,_]. /*	 
 | | |X| |X| | | |
 |X| | | | | | |X|
 | | | |X| |X| | |
X| |X| | | | | | |
 | | | | |X| |X| |
 |X| |X| | | | | |
 | | | | | |X| |X|
X| | | |X| | | | |
 | |X| | | | |X| |      CPU time 0.019 seconds, correct */