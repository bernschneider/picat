/* Janko Erich Friedman Magic Shape
https://erich-friedman.github.io/puzzle/magic/ */
import sat, util.
rotate(Q) = Res => % rechts drehen um 90 Grad
    NZ = len(Q[1]), NS = len(Q), Res = new_array(NZ,NS),
    foreach(Z in 1..NZ, S in 1..NS) Res[Z,S] = Q[S,NZ+1-Z] end. 

main(No) =>
    input(No, Max, N, CZ, CS, Shape), Len = sum(array_matrix_to_list(Shape)),
    NZ1 = len(Shape), NS1 = len(Shape[1]), % die Maaße des Vorgabe-Shapes
    Shapes = new_list(4), 
    Shapes[1] = Shape, foreach(I in 1..3) Shapes[I+1] = rotate(Shapes[I]) end, 
    M = new_array(N,N), M :: 0..Max, Mvars = array_matrix_to_list(M),
    foreach(Sh in 1..Max) count(Sh, Mvars, Len) end,
    Rot = new_list(Max), Rot :: 1..4, % Rotation des I.ten Shapes
    DZ = new_list(Max),  DZ :: 0..N-1, % Translation des I.ten Shapes
    DS = new_list(Max),  DS :: 0..N-1, 
    DZ[1] #= N - NZ1 - CZ, DS[1] #= N - NS1 - CS, % das 1. Shape kommt nach unten rechts; CZ/CS korrigieren wenn nötig
    foreach(I in 1..Max, J in 1..4) % Constraint nur, wenn Rot[I] #= J!
        NZ = len(Shapes[J]), NS = len(Shapes[J,1]), 
        foreach(DZI in 0..N-1, DSI in 0..N-1, Z in 1..NZ, S in 1..NS)
            (Rot[I] #= J #/\ DZ[I] #= DZI #/\ DS[I] #= DSI) 
            #=> (DZI + Z #=< N #/\ DSI + S #=< N )
        end,
        foreach(DZI in 0..N-NZ, DSI in 0..N-NS, Z in 1..NZ, S in 1..NS, Shapes[J,Z,S]=1)
            (Rot[I] #= J #/\ DZ[I] #= DZI #/\ DS[I] #= DSI) 
            #=> M[DZI+Z,DSI+S] #= I
        end
    end,
    % Each row and column of the Shape should have the same number of small squares filled:
    Zero = N - Len * Max // N, 
    foreach(L in M.rows() ++ M.columns()) count(0, L, Zero) end,
    solve(vars(M) ++ DZ ++ DS ++ Rot), % println((Rot,DZ,DS)),
    foreach(Z in 1..N)
        foreach(S in 1..N)
		    if M[Z,S] = 0 then print(" |") else printf("%d|", M[Z,S]) end
    	end, nl
    end.

input(0, Max, N, CZ, CS, Shape) =>  % wir nehmen an, dass Shape[1] unten rechts liegt.
    Max = 2, N = 5, CZ = 0, CS = 0, % wenn nötig wird DZ[1] und DS[1] mittels CZ und CS korrigiert
    Shape = {{0,1,1},
             {1,1,0},
             {1,0,0}}. /*
 |2|2| | |
2|2| | | |
2| | | |1|
 | | |1|1|
 | |1|1| |  correct */
input(1, Max, N, CZ, CS, Shape) =>
    Max = 4, N = 5, CZ = 0, CS = 0,
    Shape = {{1,1,1},
             {1,0,1}}. /*
4| |4|2|2|
4|4|4|2| |
3|3| |2|2|
 |3|1|1|1|
3|3|1| |1|      CPU time 0.121 seconds, correct */
input(2, Max, N, CZ, CS, Shape) =>
    Max = 4, N = 6, CZ = 0, CS = 1, % schiebe Shape[1] um 1 Feld nach links
    Shape = {{0,1,1,0},
             {1,1,1,1}}. /*
 |4|4|4|4| |
3| |4|4| |2|
3|3| | |2|2|
3|3| | |2|2|
3| |1|1| |2|
 |1|1|1|1| |    CPU time 0.223 seconds, korrekt */
input(3, Max, N, CZ, CS, Shape) =>
    Max = 4, N = 6, CZ = 0, CS = 0, 
    Shape = {{0,0,1,1},
             {1,1,1,1}}. /*
2|2|2|2| | |
2|2| | |4|4|
 | |4|4|4|4|
3|3|3|3| | |
3|3| | |1|1|
 | |1|1|1|1|    CPU time 0.222 seconds, korrekt */
input(5, Max, N, CZ, CS, Shape) =>
    Max = 8, N = 8, CZ = 0, CS = 0,
    Shape = {{0,0,1,0},
             {1,1,1,1}}. /*
 |4| |5|5|5|5| |
4|4|6| |5| | |2|
8|4|6| | | |2|2|
8|4|6|6| | | |2|
8|8|6| | |7| |2|
8| | |7|7|7|7| |
 | |3|3|3|3|1| |
 | | |3|1|1|1|1|    CPU time 5.858 seconds, korrekt */