/* Janko Erich Friedman Number Formation 
Kommt ohne Import eines Solvers aus!!!
https://erich-friedman.github.io/puzzle/form/ */
import util. 
compute(N1, N2, Op) = Res =>
    if     Op = 1 then Res = N1 + N2
    elseif Op = 2 then Res = N1 - N2
    elseif Op = 3 then Res = N1 * N2
    elseif Op = 4 then N1 mod N2 = 0, Res = N1 // N2
    elseif Op = 5 then Res = N1 ** N2 % only for second operator, otherwise we get a resource error
    end.

main(No) =>
    input(No, Groups),
    Ps = new_list(3), % the digits of each group in the correct computation order
    Brackets = new_list(3), % bracket structure of the formula
    Ops = new_array(3,2),   % + - * / ^
    between(1,100, Res), % same result for all three groups
    foreach(G in 1..3)
        permutation(Groups[G], Ps[G]), Ns = Ps[G], % re-arrange the digits of this group
        between(1,3,Brackets[G]), Bracket = Brackets[G], % select a bracket structure
        between(1,4, Ops[G,1]), between(1,5, Ops[G,2]), Op = Ops[G], % select the two operators 
        if     Bracket = 1 then % (a op b) op c
            Res1 = compute(Ns[1], Ns[2], Op[1]), Res = compute(Res1, Ns[3], Op[2])
        elseif Bracket = 2 then % a op (b op c)
            Res2 = compute(Ns[2], Ns[3], Op[2]), Res = compute(Ns[1], Res2, Op[1])
        else                     % a ^ (b / c) mit b / c = 0.5
            Ns[1] = Res * Res, 2 * Ns[2] = Ns[3]
        end
    end,
    Chr = "+-*/^",
    foreach(G in 1..3)
        if     Brackets[G] = 1 then % (a op b) op c
            printf("(%d %c %d) %c %d = %d%n", Ps[G,1], Chr[Ops[G,1]], Ps[G,2], Chr[Ops[G,2]], Ps[G,3], Res)
        elseif Brackets[G] = 2 then % a op (b op c)
            printf("%d %c (%d %c %d) = %d%n", Ps[G,1], Chr[Ops[G,1]], Ps[G,2], Chr[Ops[G,2]], Ps[G,3], Res)
        else                        % a ^ (b / c) 
            printf("%d ^ (%d / %d) = %d%n", Ps[G,1], Ps[G,2], Ps[G,3], Res)
        end
    end.

input(0, Groups) =>
    Groups = [[15,19,24], [11,30,36], [20,22,36]]. /*
24 / (19 - 15) = 6
(30 + 36) / 11 = 6
(20 + 22) - 36 = 6      CPU time 0.001 seconds, correct */
input(1, Groups) =>
    Groups = [[1,6,11], [13,20,33], [20,33,40]]. /*
(1 * 6) * 11 = 66
(13 + 20) + 33 = 66
(33 * 40) / 20 = 66     CPU time 0.016 seconds, correct */
input(2, Groups) =>
    Groups = [[3,15,18], [10,13,36], [24,27,39]]. /*
18 - (15 / 3) = 13
(36 - 10) - 13 = 13
39 / (27 - 24) = 13     CPU time 0.006 seconds, correct */
input(3, Groups) =>
    Groups = [[9,24,28], [13,24,32], [24,25,48]]. /*
(9 + 24) - 28 = 5
(13 + 24) - 32 = 5
25 ^ (24 / 48) = 5      CPU time 0.001 seconds, correct */
input(7, Groups) =>
    Groups = [[1,18,26], [19,22,23], [20,45,50]]. /*
18 * (1 ^ 26) = 18
(19 + 22) - 23 = 18
(20 * 45) / 50 = 18     CPU time 0.007 seconds, correct */
input(8, Groups) =>
    Groups = [[2,17,23], [13,18,26], [23,24,36]]. /*
(17 - 23) ^ 2 = 36
(18 * 26) / 13 = 36
(24 - 23) * 36 = 36     CPU time 0.013 seconds, correct */