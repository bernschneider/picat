/* Janko Erich Friedman One Of Each
https://erich-friedman.github.io/puzzle/1ofeach/ */
import util, sat.

main(No) => 
    input(No, C),
    N = len(C), Max = max(array_matrix_to_list(C)),
    Grid = new_array(N,N), Grid :: 0..1,
    hcp_grid(Grid),
    foreach(I in 1..Max) sum([Grid[Z,S] : Z in 1..N, S in 1..N, C[Z,S] = I]) #= 1 end,
    solve(Grid),
    printf("No %d:%n", No), 
    foreach(Z in 1..N, S in 1..N)
        if Grid[Z,S] = 0 then print("  |") else printf("%2d|", C[Z,S]) end, 
        if S = N then nl end
    end.
    
input(0, C) =>
    C = {{2,1,8,5},
         {7,8,4,5},
         {3,1,4,3},
         {6,7,2,6}}. /* No 0:
  |  |  |  |
  | 8| 4| 5|
  | 1|  | 3|
  | 7| 2| 6| korrekt */
input(1, C) =>
    C = {{8,7,5,2},
         {5,8,3,4},
         {1,6,4,3},
         {2,7,1,6}}. /* No 1:
  |  |  |  |
 5| 8| 3|  |
 1| 6| 4|  |
 2| 7|  |  | korrekt */
input(6, C) =>
    C = {{ 1, 5, 7, 2, 6},
         {10,12, 9, 2, 1},
         { 3, 4, 6, 8, 8},
         {11,12, 9, 5,10},
         { 1, 7, 4, 3,11}}. /* No. 6
No 6:
 1| 5| 7|  |  |
10|  | 9| 2|  |
 3| 4| 6| 8|  |
11|12|  |  |  |
  |  |  |  |  | korrekt */