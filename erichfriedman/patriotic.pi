/* Janko Erich Friedman Patriotic
https://erich-friedman.github.io/puzzle/patriotic/ */
import cp, util.
main(No) =>
  input(No, SigZ, SigS), N = len(SigZ),
  Board = new_array(N,N), Boardvars = array_matrix_to_list(Board), Boardvars :: 0..2,  
  foreach({Sig,L} in zip(SigZ,rows(Board)) ++ zip(SigS,columns(Board))) 
    count(1, L, 1), count(2, L, 1),
    Is = [IR,IB], Is :: 1..N, IR #!= IB, 
    element(IR, L, 1), element(IB, L, 2),% 1=red, 2=blue
    Min #= min(IR,IB), Max #= max(IR,IB), Delta #= Max - Min, 
    if Sig = 0 then % here is more than one largest string
            (Min         #= Delta #/\ Delta #>= N - Max + 1) 
        #\/ (N - Max + 1 #= Delta #/\ Delta #>= Min)
        #\/ (N - Max + 1 #= Min   #/\ Delta #=< Mi)
    elseif (Sig = 1; Sig = 2) then % red or blue
        Is[Sig] #= Min #=> (Min         #> Delta #/\ Min #> N - Max + 1),
        Is[Sig] #= Max #=> (N - Max + 1 #> Delta #/\ Min #< N - Max + 1)
    elseif Sig = 3 then % both R and B are adjacent to the largest string
        Delta #> Min, Delta #> N - Max + 1
    end
  end,
  solve(Boardvars), Chr = " RB",
  foreach(I in 1..N, J in 1..N)
     printf("%c|", Chr[1+Board[I,J]]),
     if J = N then nl end
  end.

input(0, SigZ, SigS) => % 0=white, 1=red, 2=blue, 3=magenta
    O = -1,
    SigZ = [2,O,1,O,0], SigS = [3,O,O,2,O]. /*
R| |B| | |
 |R| | |B|
 | |R|B| |
B| | | |R|
 |B| |R| | correct :-( */
    input(6, SigZ, SigS) => % 0=white, 1=red, 2=blue, 3=magenta
    O = -1,
    SigZ = [O,O,2,O,2], SigS = [1,3,3,O,O]. /*
B| |R| | |
R|B| | | |
 | | |B|R|
 | | |R|B|
 |R|B| | | correct */
    input(16, SigZ, SigS) => % 0=white, 1=red, 2=blue, 3=magenta
    O = -1,
    SigZ = [O,O,1,3,1,2], SigS = [O,1,O,2,O,3]. /*
 | |B|R| | |
 | | |B| |R|
B| |R| | | |
 |R| | |B| |
 | | | |R|B|
R|B| | | | | CPU time 0.054 seconds, correct */