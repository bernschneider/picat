/* Janko Erich Friedman Skid
https://erich-friedman.github.io/puzzle/skid/ */
import util, sat.
line(Map, Z,S, DZ,DS) = Res =>
    Res = 1,
    Search = [{Z,S,Z+DZ,S+DS}, {Z+DZ,S+DS,Z,S}],
    foreach(Key in Search, Map.get(Key, 0) = 1) Res := 2 end.

main(No) =>
    input(No, Cs, Z0,S0), N = len(Cs),
    Ign = new_array(N,N), Ign :: 0..1, % ignore a 2 in Cs when skidding to this square 
    Vs = [{(Z,S), 1} : Z in 1..N, S in 1..N] ++ [{(0,0), 1}],
    Es = [{(Z,S), (Z1,S1), _} : {(Z,S),_} in Vs, {(Z1,S1),_} in Vs, 
            DZ = Z1 - Z, DS = S1 - S, abs(DZ) + abs(DS) = 1]
       ++ [{(Z,S), (0,0), _} : {(Z,S),_} in Vs, (Z,S) != (Z0,S0)], % Finish dummy point
    EMap = new_map(), foreach({(Zv,Sv),(Z,S),B} in Es) EMap.put({Zv,Sv,Z,S}, B) end,
    path_d(Vs, Es, (Z0,S0), (0,0)),
    foreach({(Z,S), (Z1,S1), B} in Es, (Z1,S1) != (0,0), Cs[Z1,S1] = 2)
        DZ = Z1 - Z, DS = S1 - S,
        if Cs[Z,S] != 2 % 1 or s
            then B #=> EMap.get({Z1,S1,Z1+DZ,S1+DS},0) 
            else (B #/\ Ign[Z,S] #= 1) #=> EMap.get({Z1,S1,Z1+DZ,S1+DS},0)
        end,
        if 0<Z1+DZ, Z1+DZ=<N, 0<S1+DS, S1+DS=<N then
            if Cs[Z,S] != 2  then 
                B  #=> Ign[Z1+DZ,S1+DS] #= 1 
            else
                (B #/\ Ign[Z,S] #= 1) #=> Ign[Z1+DZ,S1+DS] #= 1 
            end
        end
    end,
    solve(vars(Vs) ++ vars(Es) ++ vars(Ign)), 
    % foreach({(Z,S), (Z1,S1), 1} in Es) println({(Z,S), (Z1,S1)}) end,
    SHor = " -", SVer = " |", 
    foreach(Z in 1..N-1)
        foreach(S in 1..N-1) printf( "%w%c", Cs[Z,S], SHor[line(EMap, Z,S, 0,1)] ) end, println(Cs[Z,N]),
        foreach(S in 1..N)   printf( "%c ",           SVer[line(EMap, Z,S, 1,0)] ) end, nl
    end,
    foreach(S in 1..N-1)     printf( "%w%c", Cs[N,S], SHor[line(EMap, N,S, 0,1)] ) end, println(Cs[N,N]).

input(0, Cs, Z0,S0) =>
    Cs = {{1,2,2},
          {1,1,1},
          {1,2,s}},
    Z0 = 3, S0 = 3. /*
1-2-2
|   | 
1 1-1
|     
1-2-s korrekt */
input(1, Cs, Z0,S0) =>
    Cs = {{s,1,1},
          {2,2,2},
          {1,1,1}},
    Z0 = 1, S0 = 1. /*
s 1-1
| | | 
2 2 2
| | | 
1-1 1 korrekt */
input(27, Cs, Z0,S0) =>
    Cs = {{1,2,2,1,1,2},
          {2,1,2,2,2,2},
          {1,1,1,2,2,1},
          {1,2,1,1,1,2},
          {1,s,2,1,2,2},
          {1,2,2,1,1,1}},
    Z0 = 5, S0 = 2. /*
1-2-2-1 1-2
|     | | | 
2 1-2-2 2 2
| |     | | 
1 1-1-2-2 1
          | 
1-2-1-1-1 2
|       | | 
1 s-2-1 2 2
|     | | | 
1-2-2-1 1-1 CPU time 0.015 seconds, korrekt */