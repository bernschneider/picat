/* Janko Erich Friedmann Square Tilin
https://erich-friedman.github.io/puzzle/square/ */
import util, sat.

main(No) =>
    input(No, CntH, CntV, Qmax), N = len(CntH), 
    Z0 = new_array(Qmax), S0 = new_array(Qmax), D = new_array(Qmax),
    Z0 :: 1..N,           S0 :: 1..N,           D :: 0..N,  
    % Erzeuge Matrix mit den lfd. Nummern der Rechtecke:
    M = new_array(N,N), M :: 0..Qmax,
    % The numbers below and at the right indicate the number of grid squares that are filled:
    foreach({Cnt,L} in zip(CntH, M.rows()) ++ zip(CntV, M.columns()))
        count(0, L, N-Cnt)
    end,
    % The squares do not touch or overlap, even at the corners:
    foreach(Z1 in 1..N, S1 in 1..N, Z2 in 1..N, S2 in 1..N, (Z1,S1)!=(Z2,S2), abs(Z2-Z1)=<1, abs(S2-S1)=<1)
        M[Z1,S1] #= M[Z2,S2] #\/ M[Z1,S1] #= 0 #\/ M[Z2,S2] #= 0
    end,
    foreach(Z in 1..N, S in 1..N, I in 1..Qmax)
   		(Z0[I] #=< Z #/\ Z #< Z0[I]+D[I] #/\ S0[I] #=< S #/\ S #< S0[I]+D[I])  #<=> M[Z,S] #= I
    end,
    solve(Z0 ++ S0 ++ D ++ M),
    foreach(Z in 1..N, S in 1..N)
   		printf("%c|", cond(M[Z,S] = 0, ' ', chr(96+M[Z,S]))),
   		if S = N then nl end
    end.

input(1, CntH, CntV, Qmax) =>
    CntH = [2,2,2,2,3,2,2,5,3,4], 
    CntV = [4,5,4,4,0,0,0,4,3,3],
    Qmax = 15. /* maximale Zahl von Quadraten (ggfs. erhÃ¶hen!)
e| | | | | | |d| | |
 | |k| | | | | | |o|
f| | | | | | | | |o|
 | | | | | | |m| |o|
i|i| |c| | | | | | |
i|i| | | | | | | | |
 | | | | | | |g|g| |
 |b|b|b| | | |g|g| |
 |b|b|b| | | | | | |
 |b|b|b| | | | |a| |        CPU time 2.34 seconds, sieht gut aus! */
input(2, CntH, CntV, Qmax) =>
    CntH = [4,4,2,2,5,3,4,4,4,5], 
    CntV = [4,3,2,1,2,3,4,5,6,7],
    Qmax = 15. /* 
n| |e| |l|l| | | | |
 | | | |l|l| |d| |k|
o| |b| | | | | | | |
 | | | | | | | |h|h|
m|m| | | |j| | |h|h|
m|m| |c| | | | | | |
 | | | | | |f|f|f|f|
 | | | | | |f|f|f|f|
 | | | | | |f|f|f|f|
 |g| | | | |f|f|f|f|       CPU time 5.114 seconds, correct */