/* Janko Erich Friedman Square Crosswords
https://erich-friedman.github.io/puzzle/squarecross/ */
import cp, util.
to_num(List, Num) => 
        Len = length(List),
        Num #= sum([List[I]*10**(Len-I) : I in 1..Len]).

main(No) =>
  input(No, M), NZ = len(M), NS = len(M[1]),
  O = -1, M :: O..9, foreach(I in 1..NZ, J in 1..NS, var(M[I,J])) M[I,J] #>= 0 end,
  foreach(L in rows(M) ++ columns(M))
    L1 = [X : X in L, var(X)], L1[1] #> 0,
    Max = 10**((len(L)+1)//2), Root :: 1..Max, 
    Num #= Root * Root, to_num(L1, Num)
  end, 
  solve(M), 
  foreach(I in 1..NZ, J in 1..NS)
     if M[I,J] > O then printf("%d|", M[I,J]) else print(" |") end,
     if J = NS then nl end
  end.

input(0, M) => 
    O = -1, M = {{_,_,O}, {_,_,_}}. /*
8|1| |
1|6|9| correct */
input(17, M) => 
    O = -1, M = {{O,O,O,_,_}, {O,O,_,_,_}, {_,_,_,_,_}, {_,_,O,O,O}}. /*
 | | |4|9|
 | |4|0|0|
1|6|9|0|0|
6|4| | | | CPU time 0.337 seconds, correct */