/* Janko Erich Friedman: Tricky Tour Nr. last
https://erich-friedman.github.io/puzzle/tricky/ */
import util, sat.
main =>	
    A = {{1,0,0,1,0},
         {0,0,0,1,1},
         {1,0,0,1,1},
         {0,0,1,0,1}},	 
    NZ = len(A), NS = len(A[1]),
    Vs = [{(Z,S), 1} : Z in 1..NZ, S in 1..NS, A[Z,S] = 1],
    Es = [{(Z,S), (Z1,S1), _} : {(Z,S),1} in Vs, {(Z1,S1),1} in Vs, (Z,S)!=(Z1,S1), 
            (Z1 != Z; good(A,Z,S,Z1,S1)),
            (S1 != S; good(A,Z,S,Z1,S1)),
            (S - Z != S1 - Z1; good(A,Z,S,Z1,S1)),
            (S + Z != S1 + Z1; good(A,Z,S,Z1,S1)) ], 
    % println([{(Z,S), (Z1,S1)} : {(Z,S), (Z1,S1), _} in Es]),
    hcp(Vs, Es),
    Dist = new_list(len(Es)), Dist :: 0..NZ**2+NS**2, J = 0,
    foreach({(Z,S), (Z1,S1), B} in Es)
        J := J + 1,
        Dist[J] #= B * (abs(Z1-Z)**2 + abs(S1-S)**2)
    end,
    all_different_except_0(Dist),
    solve(Dist ++ vars(Es)),
    Edges = [{ZS, ZS1} : {ZS, ZS1, B} in Es, B  = 1], Len = len(Edges),
    Zs = new_list(Len+1), Zs :: 1..NZ, 
    Ss = new_list(Len+1), Ss :: 1..NS, 
    Zs[1] = Edges[1,1,1], Ss[1] = Edges[1,1,2], % Startpunkt
    foreach(I in 1.. Len)
        printf("%w -> ", (Zs[I],Ss[I])),
        {_,(Z,S)} = Edges[find_first_of(Edges, {(Zs[I],Ss[I]),_})],
        Zs[I+1] = Z, Ss[I+1] = S
    end, print((Zs[1],Ss[1])).
/* 1,1 -> 3,4 -> 3,1 -> 2,5 -> 2,4 -> 3,5 -> 1,4 -> 4,3 -> 4,5 -> 1,1
CPU time 0.229 seconds, korrekt */   
good(A,Z1,S1,Z2,S2) => % zwischen (Z1,S1) und (Z2,S2) ist kein Vertex:
    sum([A[Z1+sign(Z2-Z1)*I,S1+sign(S2-S1)*I] : I in 1..max(abs(Z2-Z1),abs(S2-S1))-1 ]) = 0.