/* Janko Erich Friedman Weight
https://erich-friedman.github.io/puzzle/weight/ */
import util, smt.

main(Nr) =>
    input(Nr, W, Ls), all_different(W),
    foreach((L,Total) in reverse(Ls))
        IF = find_first_of(L, v), % Index of the Fulcrum
        sum([L[I] * (IF - I) : I in 1..len(L), I != IF]) #= 0, % the weights are balanced!
        sum([L[I]            : I in 1..len(L), I != IF]) #= Total
    end,
    solve(W),
    foreach((L,Total) in Ls) 
        printf("%2d= ", Total), foreach(X in L) printf("%1w ", X) end, nl        
    end.

input(0, W, Ls) => 
    W = new_list(5), W :: 1..5,
    Ls = [({W[1], 0, W[2], v, 0, T1}, _), 
          ({W[3], W[4], v, W[5]},    T1)]. /* 
15= 3 0 5 + 0 7 
 7= 1 2 + 4             correct */
input(5, W, Ls) => 
    W = new_list(5), W :: 1..5,
    Ls = [({W[1], 0, T1, v, 0, W[2], 0, 0, W[3]}, _ ), 
          ({W[4], v, 0, W[5]},                    T1)]. /* 
15= 3 0 6 + 0 5 0 0 1 
 6= 4 + 0 2             correct */
input(6, W, Ls) => 
    W = new_list(6), W :: 1..6,
    Ls = [({W[1], W[2], 0, v, T1, W[3]}, _ ), 
          ({T2, v, W[4]},                T1), 
          ({W[5], 0, 0, v, W[6]},        T2)]. /* 
21= 2 6 0 + 8 5 
 8= 4 + 4 
 4= 1 0 0 + 3           correct */