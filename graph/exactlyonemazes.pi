/* Janko Erich Friedman Exactly One Mazes - using path_d(Vs,Es,Src,Dest)
https://erich-friedman.github.io/puzzle/exactly1/ */
import sat. 
arrow(N, Es, R, C) = Chr =>
    if     R > 1, membchk({(R,C), (R-1,C), 1}, Es) then Chr = '^'
    elseif R < N, membchk({(R,C), (R+1,C), 1}, Es) then Chr = 'v'
    elseif C > 1, membchk({(R,C), (R,C-1), 1}, Es) then Chr = '<'
    elseif C < N, membchk({(R,C), (R,C+1), 1}, Es) then Chr = '>'
    else Chr = ' '
    end.

main(P) =>
    input(P, A), N = len(A), Amax = max([A[R,C] : R in 1..N, C in 1..N]),
    Vs = [{(R,C), _} : R in 1..N, C in 1..N], 
    Es = [{(R,C), (R1,C1), _} : {(R,C),_} in Vs, {(R1,C1),_} in Vs, abs(R1 - R) + abs(C1 - C) = 1], 
    % Find a path that moves from the Start in the lower left to the Finish in the upper right:
    path_d(Vs,Es,(N,1),(1,N)), 
    % The path must pass through exactly one unit square of each L shape:
    foreach(Shape in 1..Amax) sum([B : {(R,C),B} in Vs, A[R,C] = Shape]) #= 1 end,
    solve(vars(Vs) ++ vars(Es)),
    foreach(R in 1..N, C in 1..N)
        printf("%c%c|", cond((R=N,C=1), 'S', cond((R=1,C=N), 'F', cond(A[R,C] = 0, ' ', chr(96+A[R,C])))), arrow(N, Es, R, C) ),
        if C = N then nl end
    end. 

input(0, A) =>
    A = {{1,1,1,4,4,0},
         {0,2,1,4,5,0}, 
         {0,2,0,4,5,6}, 
         {0,2,2,5,5,6}, 
         {0,3,3,3,6,6}, 
         {0,0,0,3,0,0}}. /*
a |a |a |d |d |F |
 >|b>|av|d |e | ^|
 ^|b | >|d>|e>|f^|
 ^|b |b |e |e |f |
 ^|c<|c |c |f |f |
S>| ^|  |c |  |  | correct */
