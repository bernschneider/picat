/* Janko Erich Friedman Full Queen - using path_d(Vs,Es,Start,Dest)
https://erich-friedman.github.io/puzzle/fullqueen/ */
import sat.

main(P) =>
    input(P, A), N = len(A), Start = (1,1), % Start exisitert damit überall in main 
    No = new_array(N,N), No :: 0..N*N, % numbering the vertices in the path starting from "Start" = 1
    foreach(Z in 1..N, S in 1..N) 
        A[Z,S] #= 1 #<=> No[Z,S] #= 0, % Z|S is not part of the path
        if A[Z,S] = 2 then No[Z,S] #= 1, Start := (Z,S) end % hier wird "Start" aus Zeile 6 verändert
    end, 
    Vs = [{(Z,S), 1} : Z in 1..N, S in 1..N, A[Z,S] != 1], % all white squares are passed by the path
    % foreach({(Z,S), B} in Vs) B #= 1 #<=> No[Z,S] #> 0 end, % breaking symmetry
    Es =  [{(Z,S), (Z1,S1), _} : {(Z,S),_} in Vs, {(Z1,S1),_} in Vs, abs(Z1 - Z) =< 1, abs(S1 - S) =< 1, (Z1,S1) != (Z,S)],
    DummyV = (N+1,N+1),
    Vs1 = [{DummyV,1}|Vs],
    Es1 = [{V,DummyV,_} : {V,_} in Vs] ++ Es, % [{DummyV,V,_} : {V,_} in Vs] ++
    path_d(Vs1,Es1,Start,DummyV),
    EMap = new_map(), foreach ({(Z1,S1),(Z2,S2),B} in Es) EMap.put({Z1,S1,Z2,S2}, B) end,
    % The path can only change direction when it hits a black square, a square that contains part of the existing path, or the edge of the grid:
    foreach({(Z1,S1), (Z2,S2), B} in Es, (Z2,S2) != Start) 
        B #= 1 #=> No[Z2,S2] #= No[Z1,S1] + 1,
        DZ = Z2 - Z1, DS = S2 - S1, Z3 = Z2 + DZ, S3 = S2 + DS, % the prolongation of this edge leads to (Z3,S3)
        if 0<Z3, Z3=<N, 0<S3, S3=<N, A[Z3,S3] != 1 then % not the edge of the grid, does not hit a black square
            (B #= 1 #/\ EMap.get({Z2,S2,Z3,S3}) #= 0) #=> No[Z3,S3] #< No[Z2,S2]  % (Z3,S3) is part of the existing path
        end
    end,
    solve(vars(No) ++ vars(Es1) ++ values(EMap)), % println([{(Z,S), (Z1,S1)} : {(Z,S), (Z1,S1), 1}  in Es1]),
    foreach(Z in 1..N, S in 1..N)
        if A[Z,S] = 1 then print("  |") else printf("%2d|", No[Z,S]) end,
        if S = N then nl end
    end. 

input(1, A) =>
    A = {{1,0,0,0}, % 1 = Black
         {0,0,0,0}, % 2 = Start
         {1,0,0,0}, 
         {2,0,1,0}}. /* 
  | 7| 6| 5|
 8|10|11| 4|
  | 9| 3|12|
 1| 2|  |13|
CPU time 0.2 seconds, correct */
input(7, A) =>
    A = {{0,0,0,0,0}, % 1 = Black
         {0,1,0,0,0}, % 2 = Start
         {1,0,0,0,2}, 
         {0,1,0,0,1}, 
         {0,0,0,0,0}}. /*
17|16| 3| 4| 5|
18|  |15| 2| 6|
  |19|14| 7| 1|
20|  | 8|13|  |
21| 9|10|11|12|
CPU time 0.582 seconds, korrekt */
input(20, A) =>
    A = {{0,0,0,0,2,0}, % 1 = Black
         {0,0,0,0,0,0}, % 2 = Start
         {0,0,0,0,0,0}, 
         {0,1,0,0,1,0}, 
         {0,0,0,1,0,0}, 
         {0,1,0,0,0,0}}. /*
 7| 9|10|11| 1|17|
 6| 8|12| 2|18|16|
 5| 4| 3|13|15|19|
32|  |28|14|  |20|
31|29|27|  |23|21|
30|  |26|25|24|22|
CPU time 3.276 seconds, korrekt */
