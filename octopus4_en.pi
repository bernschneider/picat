/* Janko Naoki Octopus Nr. 4
https://www.janko.at/Raetsel/Naoki/Octopus.htm */
import util, sat.
main =>	
    No = {{_,0,0,_, 0,0,0, 4,0,0,_}, 
          {0,0,2,0, 0,0,0, 0,3,0,0},
          {0,_,0,0, _,0,2, 0,0,2,0},
          {3,0,0,1, 0,0,0, 1,0,0,_},
          {0,0,3,0, 0,2,0, 0,_,0,0},
          {0,0,0,0, _,0,1, 0,0,0,0},
          {0,0,1,0, 0,_,0, 0,2,0,0},
          {3,0,0,2, 0,0,0, 2,0,0,3},
          {0,_,0,0, 3,0,4, 0,0,2,0},
          {0,0,3,0, 0,0,0, 0,_,0,0},
          {_,0,0,2, 0,0,0, _,0,0,_}}, N = len(No),
    Vs = [{(R,C), _} : R in 1..N, C in 1..N], 
    VMap = new_map(), foreach ({(R,C),B} in Vs) VMap.put({R,C}, B) end,
    % The edges are undirected:
    Es = [{(R,C), (R1,C1), _} : {(R,C),_} in Vs, (R1,C1) in [(R,C+1), (R+1,C), (R+1,C+1), (R+1,C-1)], R1=<N, 0<C1, C1=<N], % , VMap.get({R1,C1}, 0) = 1
    EMap = new_map(), foreach({(R1,C1),(R2,C2),B} in Es) 
        EMap.put({R1,C1,R2,C2}, B), EMap.put({R2,C2,R1,C1}, B) % edge > <=> edge <
    end,
    % The number in a circle indicates how many lines ends there:
    foreach({(R,C), B} in Vs, (var(No[R,C]); No[R,C] > 0))
        VMap.get({R,C}) = 1,
        if ground(No[R,C]) then
            No[R,C] #= sum([EMap.get({R,C, R1,C1}, 0) : R1 in R-1..R+1, C1 in C-1..C+1, (R1,C1)!=(R,C)])
        end
    end,
    foreach({(R,C), B} in Vs)
        EMap.get({R,C, R+1,C+1}, 0) + EMap.get({R,C+1, R+1,C}, 0) #< 2 % / and \ donÂ´t cross!
    end,
    scc(Vs, Es),  % the vertices in Vs are connected by the undirected edges in Es
    foreach({(R,C), _} in Vs, ground(No[R,C]), No[R,C] = 0) % for non-circle fields count the edges of R|C:
        Cnt #= sum([EMap.get({R,C, R1,C1}, 0) : R1 in R-1..R+1, C1 in C-1..C+1, (R1,C1)!=(R,C)]),
        Cnt :: [0,2], % non open ends, no T- oder X-crossings
        EMap.get({R,C, R,C-1}, 0)   #= EMap.get({R,C, R,C+1}, 0),   % edge left <=> edge right
        EMap.get({R,C, R-1,C}, 0)   #= EMap.get({R,C, R+1,C}, 0),   % edge up <=> edge down
        EMap.get({R,C, R-1,C-1}, 0) #= EMap.get({R,C, R+1,C+1}, 0), % 0 or 2 \-edges
        EMap.get({R,C, R-1,C+1}, 0) #= EMap.get({R,C, R+1,C-1}, 0)  % 0 or 2 /-edges
    end,    
    solve(vars(Vs) ++ vars(Es)), ChrH = " -", ChrV = " |", ChrD = " \\/X",
    foreach(R in 1..N)
        foreach(C in 1..N)
            CK = cond(var(No[R,C]), 'X', cond(No[R,C] > 0, chr(48+No[R,C]), cond(VMap.get({R,C}) = 1, '*', ' ') ) ),
            CH = cond(C < N, ChrH[1+EMap.get({R,C, R,C+1})], ' '),
            printf("%c%c", CK, CH)
        end, nl,
        if R < N then 
            foreach(C in 1..N) 
                printf("%c%c", ChrV[1+EMap.get({R,C, R+1,C})], 
                               ChrD[1+EMap.get({R,C, R+1,C+1}, 0)+2*EMap.get({R,C+1, R+1,C}, 0)])
            end, nl 
        end
    end. /*
X     X-*-*-*-4-*-*-X 
|    /|       |\      
*   2 *       * 3     
|   | |       | |\    
* X * * X-*-2 * * 2   
|/  | | |   | | |  \  
3   * 1 *   * 1 *   X 
|   |   |   |   |   | 
*   3   * 2 *   X   * 
|   |\  |/| |       | 
*   * * X * 1       * 
|   |  \ \|         | 
*   1   * X-*-*-2   * 
|        \     /    | 
3-*-*-2   *   2     3 
|      \   \ /     /| 
* X-*-*-3-*-4-*-*-2 * 
|  \                | 
*   3-*-*-*-*-*-X   * 
|    \         /    | 
X     2-*-*-*-X-*-*-X 
CPU time 0.076 seconds, korrekt */