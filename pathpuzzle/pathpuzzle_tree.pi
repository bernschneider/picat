/* Path Puzzle - using path constrain 
https://www.researchgate.net/publication/323570660_Path_Puzzles_Discrete_Tomography_with_a_Path_Constraint_is_Hard/figures?lo=1 */
import util, sat.

main =>
    Start = (6,1), Goal = (1,2),
    Hsum = [5,3,5,1,5,4],
    Vsum = [5,3,3,4,3,5], 
    N = len(Hsum), 
    Grid = new_array(N,N), Grid :: 0..1,
    Vs = [{(R,C), Grid[R,C]} : R in 1..N, C in 1..N], 
    Es = [{(R,C), (R1,C1), _} : R in 1..N, C in 1..N, R1 in 1..N, C1 in 1..N, abs(R1 - R) + abs(C1 - C) == 1, (R,C) @< (R1,C1)],     
    path(Vs,Es,Start,[Goal]),   % there is an (undirected) path from Start to Goal
    foreach({Cnt,L} in zip(Vsum, Grid.columns()) ++ zip(Hsum, Grid.rows()))
        Cnt #= sum(L)
    end,
    scc(Vs, Es),
    solve(vars(Vs) ++ vars(Es) ++ vars(Grid)),
    SGrid = " *", SHor = " -", SVer = " |",
    % Attention: The edges in Es are undirected and always in @< lexicografical order!
    EMap = new_map(), foreach({(R,C), (R1,C1), 1} in Es) EMap.put({R,C,R1,C1}, 1), EMap.put({R1,C1,R,C}, 1) end,
    foreach (R in 1..N-1)
        foreach (C in 1..N-1) printf( "%c%c", SGrid[1+Grid[R,C]], SHor[1 + EMap.get({R,C, R,C+1}, 0)] ) end, println(SGrid[1+Grid[R,N]]),
        foreach (C in 1..N)   printf( "%c ",                      SVer[1 + EMap.get({R,C, R+1,C}, 0)] ) end, nl
    end,
    foreach (C in 1..N-1) printf( "%c%c", SGrid[1+Grid[N,C]], SHor[1 + EMap.get({N,C, N,C+1}, 0)] ) end, println(SGrid[1+Grid[N,N]]). /*
*-*   *-*-*
|     |   | 
*     *   *
|     |   | 
*-*-*-*   *
          | 
          *
          | 
*-*-*   *-*
|   |   |   
*   *-*-*  
CPU time 0.008 seconds, correct */
