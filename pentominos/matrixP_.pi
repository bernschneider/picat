% Module for Groza 127the12pentominos.pi
module matrixP_.
import util.

rotate(Q) = Res => % rotate right by 90 degrees
    NZ = len(Q[1]), NS = len(Q), Res = new_array(NZ,NS),
    foreach(Z in 1..NZ, S in 1..NS) Res[Z,S] = Q[S,NZ+1-Z] end. 

reflecth(Q) = Res => % reflect horizontally
    NR = len(Q), NC = len(Q[1]),
    Res = new_array(NR,NC),
    foreach(R in 1..NR, C in 1..NC) Res[R,C] = Q[NR+1-R,C] end.

matprint(Q) =>
    NZ = len(Q), NS = len(Q[1]), 
    foreach(Z in 1..NZ, S in 1..NS)
        printf("%d|", Q[Z,S]),
        if S=NS then nl end
    end, nl.

generate(Chr, Res) =>
    Pmap = new_map(['L' = {{1,1,1,1}, {1,0,0,0}},
                    'N' = {{0,1,1,1}, {1,1,0,0}},
                    'Y' = {{1,1,1,1}, {0,1,0,0}},
                    'F' = {{1,1,0}, {0,1,1}, {0,1,0}},
                    'T' = {{1,1,1}, {0,1,0}, {0,1,0}},
                    'W' = {{0,0,1}, {0,1,1}, {1,1,0}},
                    'P' = {{1,1,1}, {1,1,0}},
                    'V' = {{0,0,1}, {0,0,1}, {1,1,1}},
                    'U' = {{1,0,1}, {1,1,1}},
                    'Z' = {{1,0,0}, {1,1,1}, {0,0,1}},
                    'I' = {{1,1,1,1,1}},
                    'X' = {{0,1,0}, {1,1,1}, {0,1,0}}]),
    P0 = [Pmap.get(C) : C in Chr],
    Np = len(P0), P = [],
    foreach(I in 1..Np)
        VarI = [P0[I]],
        foreach(_ in 1..3) VarI := [rotate(head(VarI))|VarI] end, 
        VarI := VarI ++ [reflecth(Pt) : Pt in VarI],
        P := [remove_dups(VarI)|P] 
    end,
    Res = reverse(P).

/*
main => 
    generate("TWYZIL", P),
    foreach(VarI in P)
        foreach(Q in VarI) matprint(Q) end,
        printf("%d ---%n", len(VarI))
    end.
*/