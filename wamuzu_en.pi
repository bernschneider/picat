/* Janko Wamuzu 
https://www.janko.at/Raetsel/Wamuzu/index.htm
Strange behavior of acyclic/2 constraint! Look at line 29:
For instance 1 we must include the acyclic constraint, otherwise the solution contains cycles.
With the acyclic constraint no solution is found for instance 17; 
without this constraint the solution is acyclic anyway and correct. */
import sat, util.
main(No) =>
    input(No, Str), 
    Cs = [[cond(Chr="-", 0, 1) : Chr in split(Line)] : Line in Str.split("\n")],
    N = len(Cs), Cnt = sum([Cs[R,C] : R in 1..N, C in 1..N]) // 2,
    Start = new_array(N,N), StartVars = vars(Start), StartVars :: [0,1], % start point
    Cnt #= sum(StartVars),             % 01234
    M = new_array(N,N), M :: 0..4, Ar = " ><v^", % Ar = Arrow
    foreach(R in 1..N, C in 1..N)
        (Cs[R,C] #= 1 #/\ Start[R,C] #= 0) #<=> M[R,C] #= 0, % end points contain no arrow
        if Cs[R,C] = 0 then Start[R,C] #= 0 end, % no circle => no start point
        % No arrow points at a start square; exactly one arrow points at the other squares:
        1 #= (Start[R,C] #= 1) + sum([(M[R,C1] #= 1) : C1 in [C-1], C1>0])    % >
                               + sum([(M[R,C1] #= 2) : C1 in [C+1], C1=<N])   % <
                               + sum([(M[R1,C] #= 3) : R1 in [R-1], R1>0])    % v
                               + sum([(M[R1,C] #= 4) : R1 in [R+1], R1=<N])   % ^
    end,
    % All sections of a path must be of length 1, i.e. a path must bend by 90Â° in each cell:
    foreach(R in 1..N, C in 1..N-1) (M[R,C] #= 1 #\/ M[R,C] #= 2) #=> (M[R,C+1] #=  0 #\/ M[R,C+1] #>= 3) end, 
    foreach(R in 1..N-1, C in 1..N) (M[R,C] #= 3 #\/ M[R,C] #= 4) #=> (M[R+1,C] #!= 3 #/\ M[R+1,C] #!= 4) end, 
    Vs = [{(R,C), 1} : R in 1..N, C in 1..N], % All cells must be visited by a path exactly once ..
    Es = [{(R,C), (R1,C1), _} : R in 1..N, C in 1..N, R1 in 1..N, C1 in 1..N, abs(R1 - R) + abs(C1 - C) = 1], 
    if No = 1 then acyclic_d(Vs, Es) end, % .. and the graph must not contain any cycles
    foreach({(R,C), (R,C1), B} in Es, C1 = C+1) B #= 1 #<=> M[R,C] #= 1 end, % >
    foreach({(R,C), (R,C1), B} in Es, C1 = C-1) B #= 1 #<=> M[R,C] #= 2 end, % <
    foreach({(R,C), (R1,C), B} in Es, R1 = R+1) B #= 1 #<=> M[R,C] #= 3 end, % v
    foreach({(R,C), (R1,C), B} in Es, R1 = R-1) B #= 1 #<=> M[R,C] #= 4 end, % ^
    solve(vars(M) ++ StartVars ++ vars(Es)), Circle = " o", 
    foreach(R in 1..N) 
       foreach(C in 1..N) printf("%c%c|", Circle[1+Cs[R,C]], Ar[1+M[R,C]]) end, nl
    end.

input(1, Str) =>
    Str = "- x x x x -
x - - - - x
x - - - - x
- - - - - -
- - - - - x
- x x x x x". /* 
 >|o |o |ov|o>| v|
o^| >| ^| >| v|o |
o | ^| <| v| <|ov|
 ^| <| ^| <| v| <|
 >| ^| >| v| >|o |
 ^|o<|o^|o |o>|o |                               CPU time 0.02 seconds, correct */
input(17, Str) =>
    Str = "- - - x - - x - x x - - x -
x - - - - - - - - - - - - x
- - x - - - x x - - - x - -
x - - x - - - - x - - - - x
x x x - - x - - - - - - - -
- - - x - - - - - - - x - -
x - - x - - - - - - - x - -
x - - x - - x - - x - - x x
- - - - x - - - - - - x - -
- - x - - x x - - - - - - -
x - - - x x - - - - - x - -
- - - x - x - - x - - - - -
x - - x x - - - - - x - - x
x x x - - - - - - - x - x -". /*
 v| <| v|o<| v| <|ov| >|o |o | v| <|o | <|
o | ^| <| v| <| ^| <| ^| <| ^| <| ^| <|o^|
 v| <|ov| >| v| >|o |o | ^| <| v|o<| ^| <|
o | ^| <|ov| >| ^| >| ^|o | ^| <| v| <|o^|
ov|o>|o | >| v|o | ^| <| ^| <| v| <| ^| <|
 >| v| >|o | >| ^| >| ^| >| ^| >|o | >| ^|
ov| >| ^|o>| v| >| ^| >| ^| >| v|o | ^| <|
o | v| <|ov| >| ^|o | ^| <|o^| >| ^|o |o^|
 v| <| ^| <|ov| >| ^| >| ^| >| v|o | ^| <|
 >| v|o | v| <|o^|o>| ^| >| ^| >| ^| >| ^|
o | <| ^| <|ov|o>| v| >| ^| >| v|o | ^| <|
 >| v| >|o | >|o | >| ^|o>| ^| >| ^| >| ^|
o^| >| ^|o |ov| >| v| >| v| >|o | >| ^|o |
o>|o |o>| ^| >| ^| >| ^| >| ^|o>| ^|o>| ^|        CPU time 0.288 seconds, correct */